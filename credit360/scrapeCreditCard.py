{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests \n",
    "from bs4 import BeautifulSoup \n",
    "import csv \n",
    "\n",
    "# URL if the user needs info on cards with best rewards benefits\n",
    "url1 = \"https://www.nerdwallet.com/best/credit-cards/rewards\"\n",
    "url2 = \"https://www.nerdwallet.com/best/credit-cards/travel\"\n",
    "url3 = \"https://www.nerdwallet.com/best/credit-cards/low-interest\"\n",
    "url4 = \"https://www.nerdwallet.com/best/credit-cards/bad-credit\"\n",
    "url5 = \"https://www.nerdwallet.com/best/credit-cards/small-business\"\n",
    "url6 = \"https://www.nerdwallet.com/best/credit-cards/cash-back\"\n",
    "\n",
    "creditcards = []\n",
    "response = requests.get(url1)\n",
    "soup = BeautifulSoup(response.content, 'html5lib') \n",
    "table = soup.find('div', attrs = {'class':'_3ZtB6'})\n",
    "\n",
    "for row in table.findAll('div', attrs = {'class':'_31LHE _5HM2q'}): \n",
    "    creditcard = {}\n",
    "    creditcard['bestFor'] = 'rewards'\n",
    "    creditcard['imageURL'] = 'https:' + row.img['src']\n",
    "    creditcard['name'] = row.img['alt']\n",
    "    creditcard['appLink'] = row.a['href']\n",
    "    creditcard['description'] = row.find('div', attrs = {'class': '_2BuEk _2Skhw'}).text\n",
    "        \n",
    "    for i in row.findAll('span', attrs = {'class': 'label-min _2A3Sw _2vS3U'}):\n",
    "        creditcard['reqCreditScore'] = i.text\n",
    "        creditcards.append(creditcard)\n",
    "\n",
    "response = requests.get(url2)\n",
    "soup = BeautifulSoup(response.content, 'html5lib') \n",
    "table = soup.find('div', attrs = {'class':'_3ZtB6'})\n",
    "\n",
    "for row in table.findAll('div', attrs = {'class':'_31LHE _5HM2q'}): \n",
    "    creditcard = {}\n",
    "    creditcard['bestFor'] = 'travel'\n",
    "    creditcard['imageURL'] = 'https:' + row.img['src']\n",
    "    creditcard['name'] = row.img['alt']\n",
    "    creditcard['appLink'] = row.a['href']\n",
    "    creditcard['description'] = row.find('div', attrs = {'class': '_2BuEk _2Skhw'}).text\n",
    "        \n",
    "    for i in row.findAll('span', attrs = {'class': 'label-min _2A3Sw _2vS3U'}):\n",
    "        creditcard['reqCreditScore'] = i.text\n",
    "        creditcards.append(creditcard)\n",
    "\n",
    "response = requests.get(url3)\n",
    "soup = BeautifulSoup(response.content, 'html5lib') \n",
    "table = soup.find('div', attrs = {'class':'_3ZtB6'})\n",
    "\n",
    "for row in table.findAll('div', attrs = {'class':'_31LHE _5HM2q'}): \n",
    "    creditcard = {}\n",
    "    creditcard['bestFor'] = 'low-interest'\n",
    "    creditcard['imageURL'] = 'https:' + row.img['src']\n",
    "    creditcard['name'] = row.img['alt']\n",
    "    creditcard['appLink'] = row.a['href']\n",
    "    creditcard['description'] = row.find('div', attrs = {'class': '_2BuEk _2Skhw'}).text\n",
    "        \n",
    "    for i in row.findAll('span', attrs = {'class': 'label-min _2A3Sw _2vS3U'}):\n",
    "        creditcard['reqCreditScore'] = i.text\n",
    "        creditcards.append(creditcard)\n",
    "        \n",
    "response = requests.get(url4)\n",
    "soup = BeautifulSoup(response.content, 'html5lib') \n",
    "table = soup.find('div', attrs = {'class':'_3ZtB6'})\n",
    "\n",
    "for row in table.findAll('div', attrs = {'class':'_31LHE _5HM2q'}): \n",
    "    creditcard = {}\n",
    "    creditcard['bestFor'] = 'bad-credit'\n",
    "    creditcard['imageURL'] = 'https:' + row.img['src']\n",
    "    creditcard['name'] = row.img['alt']\n",
    "    creditcard['appLink'] = row.a['href']\n",
    "    creditcard['description'] = row.find('div', attrs = {'class': '_2BuEk _2Skhw'}).text\n",
    "        \n",
    "    for i in row.findAll('span', attrs = {'class': 'label-min _2A3Sw _2vS3U'}):\n",
    "        creditcard['reqCreditScore'] = i.text\n",
    "        creditcards.append(creditcard)\n",
    "        \n",
    "response = requests.get(url5)\n",
    "soup = BeautifulSoup(response.content, 'html5lib') \n",
    "table = soup.find('div', attrs = {'class':'_3ZtB6'})\n",
    "\n",
    "for row in table.findAll('div', attrs = {'class':'_31LHE _5HM2q'}): \n",
    "    creditcard = {}\n",
    "    creditcard['bestFor'] = 'small-business'\n",
    "    creditcard['imageURL'] = 'https:' + row.img['src']\n",
    "    creditcard['name'] = row.img['alt']\n",
    "    creditcard['appLink'] = row.a['href']\n",
    "    creditcard['description'] = row.find('div', attrs = {'class': '_2BuEk _2Skhw'}).text\n",
    "        \n",
    "    for i in row.findAll('span', attrs = {'class': 'label-min _2A3Sw _2vS3U'}):\n",
    "        creditcard['reqCreditScore'] = i.text\n",
    "        creditcards.append(creditcard)\n",
    "        \n",
    "response = requests.get(url6)\n",
    "soup = BeautifulSoup(response.content, 'html5lib') \n",
    "table = soup.find('div', attrs = {'class':'_3ZtB6'})\n",
    "\n",
    "for row in table.findAll('div', attrs = {'class':'_31LHE _5HM2q'}): \n",
    "    creditcard = {}\n",
    "    creditcard['bestFor'] = 'cash-back'\n",
    "    creditcard['imageURL'] = 'https:' + row.img['src']\n",
    "    creditcard['name'] = row.img['alt']\n",
    "    creditcard['appLink'] = row.a['href']\n",
    "    creditcard['description'] = row.find('div', attrs = {'class': '_2BuEk _2Skhw'}).text\n",
    "        \n",
    "    for i in row.findAll('span', attrs = {'class': 'label-min _2A3Sw _2vS3U'}):\n",
    "        creditcard['reqCreditScore'] = i.text\n",
    "        creditcards.append(creditcard)\n",
    "\n",
    "# print(soup.prettify())\n",
    "\n",
    "f = open(\"creditcard.csv\", 'w',newline = \"\")\n",
    "with open(\"creditcard.csv\", 'w',newline = \"\") as f:\n",
    "    w = csv.DictWriter(f,['bestFor','imageURL','name','appLink','description','reqCreditScore'])\n",
    "    w.writeheader()\n",
    "    for creditcard in creditcards:\n",
    "        w.writerow(creditcard)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
